{"version":3,"sources":["assets/images/enemyCar.png","assets/images/myCar.png","assets/images/8bit-road.png","assets/images/reward.png","assets/images/tree-8bit.png","assets/images/npm.svg","assets/images/pixi.svg","assets/images/tf.svg","assets/images/react.svg","assets/images/github.svg","assets/images/vk.svg","assets/images/instagram.svg","assets/images/keyboard-arrows.png","components/game-status-bar/game-status-bar.jsx","components/game-description/game-description.jsx","components/game-over/game-over.jsx","components/game-hello-window/game-hello-window.jsx","pixi-aliases.js","constants.js","gameContext.js","components/main-game/main-game.jsx","components/button-8bit/button-8bit.jsx","components/game-info-links/game-info-links.jsx","neuronal-network/speach-recognition.js","App.js","reportWebVitals.js","index.js"],"names":["GameStatusBar","props","stopTimer","gameDuration","gameReward","hourRef","useRef","minuteRef","secondRef","millisecondRef","returnCorrectTimerData","ref","input","current","Number","innerText","useEffect","hour","minute","second","millisecond","timerIntervalId","setInterval","clearInterval","className","src","reward","width","alt","height","GameDescription","isTextNeed","infoTitle","infoLinks","style","display","alignItems","keyBoardArrows","title","imgLinks","GameOver","onRestartGameClick","finalTime","id","classNames","handleButtonOnClick","GameHelloWindow","onInitButtonClick","useState","isLoading","setLoading","btnYesRef","e","target","onKeyUp","console","log","code","click","tabIndex","reference","TextureCache","PIXI","Sprite","ONCOMING_ENEMY_CAR","OFFCOMING_ENEMY_CAR","MAIN_GAME_CAR","frameWorks","name","link","socialNetworks","GameContext","React","createContext","initialState","isCrashing","app","document","documentElement","clientHeight","antialias","transparent","resolution","gameCar","enemyCars","currentRoad","topRoad","isNeuronalNetworkEnable","isNeuronalNetworkLoaded","pauseSpeechRecognition","isStartWindowShown","MainGame","setup","state","gameCarSprite","createCarSprite","enemyCarSprite","road","roadSprite","view","intervalId","startEnemyCreation","stage","addChild","setState","enemyCarsId","enemy","direction","ticker","add","delta","gameLoop","calcRandomPosition","Math","round","random","carDirection","carType","gameField","vx","vy","rotation","PI","position","set","carOffset","createNewRoad","newRoad","newRoadSprite","addChildAt","moveRoad","isUpdateRoadStateNeed","y","prevState","removeChild","moveCar","context","forEach","car","carOnGameFieldChecking","filter","carHitChecking","stopAllMovement","offset","enemyDirection","newEnemy","push","x","xAxisOffset","abs","setMoveDirection","stop","clearAllEnemies","setNNPaused","mainCar","enemyCar","rotationOffsetX","rotationOffsetY","combinedHalfWidths","combinedHalfHeights","centerX","centerY","halfWidth","halfHeight","start","setInitialGameCarPosition","calcGameDuration","callback","rootContainerRef","createRef","this","appendChild","loader","load","Component","contextType","Button8Bit","onClick","GameInfoLinks","map","image","href","images","initSpeechRecognitionModel","a","recognizer","speechCommands","ensureModelLoaded","App","isNNEnable","setNNEnable","isHelloWindowShow","setHelloWindowShow","isNNLoaded","setLoaded","isPaused","togglePaused","moveDirection","addEventListener","preventDefault","changeCarDirectionByVoice","value","then","isPause","words","wordLabels","listen","scores","Array","from","s","i","score","word","sort","s1","s2","overlapFactor","probabilityThreshold","predictWord","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a6c48fed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/enemyCar.120d001c.png\";","export default __webpack_public_path__ + \"static/media/myCar.ebc799fd.png\";","export default __webpack_public_path__ + \"static/media/8bit-road.b23dcd4f.png\";","export default __webpack_public_path__ + \"static/media/reward.f6fccba0.png\";","export default __webpack_public_path__ + \"static/media/tree-8bit.842fadc3.png\";","export default __webpack_public_path__ + \"static/media/npm.e6f64ab2.svg\";","export default __webpack_public_path__ + \"static/media/pixi.3119a835.svg\";","export default __webpack_public_path__ + \"static/media/tf.d4a01935.svg\";","export default __webpack_public_path__ + \"static/media/react.928f956d.svg\";","export default __webpack_public_path__ + \"static/media/github.fa0212fe.svg\";","export default __webpack_public_path__ + \"static/media/vk.e9c609fb.svg\";","export default __webpack_public_path__ + \"static/media/instagram.53626cb1.svg\";","export default __webpack_public_path__ + \"static/media/keyboard-arrows.528a7946.png\";","import React, { useRef, useEffect } from 'react'\nimport { reward } from '../../assets/images'\n\nimport './style.scss'\n\nexport const GameStatusBar = (props) => {\n    const { stopTimer, gameDuration, gameReward = 0 } = props\n    const hourRef = useRef(null)\n    const minuteRef = useRef(null)\n    const secondRef = useRef(null)\n    const millisecondRef = useRef(null)\n\n    const returnCorrectTimerData = (ref, input) => {\n        if (ref.current && Number(ref.current.innerText) !== input) {\n            ref.current.innerText = input > 10 ? input : `0${input}`\n        }\n    }\n\n    useEffect(() => {\n        let hour = 0;\n        let minute = 0;\n        let second = 0;\n        let millisecond = 0;\n\n        const timerIntervalId = setInterval(() => {\n            if ((millisecond += 1) === 1000) {\n                millisecond = 0;\n                second++;\n            }\n            if (second === 60) {\n                second = 0;\n                minute++;\n            }\n            if (minute === 60) {\n                minute = 0;\n                hour++;\n            }\n\n            returnCorrectTimerData(hourRef, hour);\n            returnCorrectTimerData(minuteRef, minute);\n            returnCorrectTimerData(secondRef, second);\n            returnCorrectTimerData(millisecondRef ,millisecond);\n        }, 1)\n\n        if (stopTimer) {\n            clearInterval(timerIntervalId)\n            gameDuration(() => {\n                return `${hourRef.current.innerText}:${minuteRef.current.innerText}:${secondRef.current.innerText}:${millisecondRef.current.innerText}`\n            })\n        }\n\n        return () => {\n            clearInterval(timerIntervalId)\n        }\n    }, [stopTimer])\n\n    return (\n        <div className=\"game-status-bar\">\n            <div className=\"game-reward\">\n                <img src={reward} width={80} alt=\"reward\" height={50}/>\n                <span>{gameReward}</span>\n            </div>\n            <div className=\"timer-container\">\n                <span ref={hourRef}>00</span>:<span ref={minuteRef}>00</span>:<span ref={secondRef}>00</span>:<span ref={millisecondRef}>000</span>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport {GameInfoLinks} from \"..\"\nimport {keyBoardArrows} from \"../../assets/images\"\n\nimport './style.scss'\n\nexport const GameDescription = (props) => {\n    const { isTextNeed, infoTitle, infoLinks } = props\n    return (\n        <div className=\"game-description-container\">\n            {isTextNeed &&\n                <>\n                    <h1 className=\"game-description-title\">\n                        8-bit Racing v0.0.1\n                    </h1>\n                    <div className=\"game-description-rules\">\n                        <p><strong>How to play:</strong></p>\n                        <p>If you turn on speech recognition use voice commands - <strong>'UP'</strong>, <strong>'LEFT''</strong>, <strong>'RIGHT'</strong>, <strong>'DOWN',</strong> <strong>'STOP' </strong>- for controlling your car.</p>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <p>Else opportunity, use default keyboards arrow keys</p>\n                            <img src={keyBoardArrows} alt=\"arrow-keys\" width={64} height={64}/>\n                        </div>\n                    </div>\n                </>\n            }<strong>\n      </strong>      <div className=\"game-description-links\">\n                <GameInfoLinks\n                    title={infoTitle}\n                    imgLinks={infoLinks}\n                />\n            </div>\n        </div>\n    )\n}\n\nGameDescription.propTypes = {\n    isTextNeed: PropTypes.bool.isRequired,\n    infoTitle: PropTypes.string.isRequired,\n    infoLinks: PropTypes.array.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './style.scss'\nimport {Button8Bit} from \"..\";\nimport {reward} from \"../../assets/images\";\n\nexport const GameOver = (props) => {\n    const { onRestartGameClick, finalTime, gameReward } = props\n    return (\n        <div className=\"game-over-alert\">\n            <p className=\"game-over-header\"> GAME OVER </p>\n            <div className=\"game-info\">\n                <img src={reward} width={80} alt=\"reward\" height={50}/>\n                <span>{gameReward}</span>\n                <p>{finalTime}</p>\n            </div>\n            <Button8Bit\n                id=\"resetBtn\"\n                classNames=\"reset-btn\"\n                handleButtonOnClick={onRestartGameClick}\n                title=\"Restart\"\n            />\n        </div>\n    )\n}\n\nGameOver.propTypes = {\n    onRestartGameClick: PropTypes.func.isRequired,\n    finalTime: PropTypes.string.isRequired,\n    gameReward: PropTypes.number.isRequired,\n}\n","import React, {useRef, useState} from 'react'\n\nimport './style.scss'\nimport {Button8Bit} from \"..\";\n\nexport const GameHelloWindow = (props) => {\n    const { onInitButtonClick } = props\n    const [isLoading, setLoading] = useState(false)\n\n    const btnYesRef = useRef(null)\n\n    const handleButtonOnClick = (e) => {\n        onInitButtonClick(e.target.id === 'enableButton')\n        setLoading(true)\n    }\n\n    const handleKeyUp = (e) => {\n        console.log(e.code)\n        if (e.code === 'Enter') {\n            btnYesRef.current.click()\n        }\n    }\n\n    return (\n        <div className=\"start-game-container\" onKeyUp={handleKeyUp} tabIndex=\"0\">\n            <div className=\"game-container-1\">\n                <h1> 8-bit Racing v0.0.1</h1>\n\n                <p>This mini-game use a neural network for voice recognition. You can control the car using voice commands. To enable the neural network, click \"Yes\"</p>\n                {!isLoading\n                    ?\n                    <>\n                        <p>Turn on Speech recognition?</p>\n                        <div className=\"button-container\">\n                            <Button8Bit\n                                reference={btnYesRef}\n                                id=\"enableButton\"\n                                title=\"Yes\"\n                                handleButtonOnClick={handleButtonOnClick}\n                            />\n                            <Button8Bit\n                                id=\"disableButton\"\n                                title=\"No\"\n                                handleButtonOnClick={handleButtonOnClick}\n                            />\n                        </div>\n                    </>\n                    :\n                    <p className=\"nn-loader\" >Neuronal Network loading...</p>\n                }\n            </div>\n            <div className=\"game-container-2\"/>\n            <div className=\"game-container-3\"/>\n        </div>\n    );\n};\n\n\n","import * as PIXI from 'pixi.js'\n\nexport const TextureCache = PIXI.utils.TextureCache\nexport const Application = PIXI.Application\nexport const Sprite = PIXI.Sprite\nexport const Graphics = PIXI.Graphics\n","export const ONCOMING_ENEMY_CAR = 'front'\nexport const OFFCOMING_ENEMY_CAR = 'back'\nexport const MAIN_GAME_CAR = 'MAIN_GAME_CAR'\n\nexport const frameWorks= [\n    {\n        name: 'react',\n        link: 'https://ru.reactjs.org/',\n        height: 32,\n        width: 32\n    },\n    {\n        name: 'pixi',\n        link: 'https://www.pixijs.com/'\n    },\n    {\n        name: 'npm',\n        link: 'https://www.npmjs.com/package/@tensorflow-models/speech-commands',\n        width: 50,\n        height: 50\n    },\n    {\n        name: 'tf',\n        link: 'https://www.tensorflow.org/',\n        width: 100\n    },\n]\n\nexport const socialNetworks= [\n    {\n        name: 'github',\n        link: 'https://github.com/bityutskiyAO/8bit-racing-game-with-speech-recognition',\n        height: 32,\n        width: 32\n    },\n    {\n        name: 'vk',\n        link: 'https://vk.com/bit_a',\n        height: 32,\n        width: 32\n    }\n]\n","import React from 'react'\n\nexport const GameContext = React.createContext( 'stop')\n","import React from 'react'\nimport * as PIXI from 'pixi.js'\nimport {gameCar, enemyCar, road} from '../../assets/images'\nimport {Sprite, TextureCache} from \"../../pixi-aliases\"\nimport {ONCOMING_ENEMY_CAR, OFFCOMING_ENEMY_CAR, MAIN_GAME_CAR} from \"../../constants\"\nimport {GameOver, GameStatusBar} from \"..\"\nimport {GameContext} from \"../../gameContext\"\n\nimport './style.scss'\n\nconst initialState = {\n    isCrashing: false,\n    app: new PIXI.Application({\n        width: 800,\n        height:  document.documentElement.clientHeight,\n        antialias: true,\n        transparent: true,\n        resolution: 1\n    }),\n    gameCar: null,\n    enemyCars: null,\n    currentRoad: null,\n    topRoad: null,\n    stopTimer: false,\n    gameDuration: '',\n    gameReward: 0,\n    isNeuronalNetworkEnable: false,\n    isNeuronalNetworkLoaded: false,\n    pauseSpeechRecognition: false,\n    isStartWindowShown: true\n\n}\n\nclass MainGame extends React.Component {\n    /**\n     * Инициаализация рабочего окна\n     */\n    constructor(props) {\n        super(props)\n        this.rootContainerRef = React.createRef()\n        this.state = initialState\n        this.xAxisOffset = 0\n        this.enemyCarsId = 0\n    }\n\n    /**\n     * Заагрузка картинок, инициализация game-поля\n     */\n    componentDidMount() {\n        this.rootContainerRef.current.appendChild(this.state.app.view)\n        this.state.app.loader\n            .add(\"gameCar\", gameCar)\n            .add(\"enemyCar\", enemyCar)\n            .add(\"road\", road)\n            .load(this.setup)\n    }\n\n    /**\n     * Начаальные настроки для игры\n     * Создание игровых объектов gameCarSprite, enemyCarSprite, roadSprite\n     * Установка лисенера за игровыми действиями app.ticker.add(...)\n     */\n    setup = () => {\n        const { app } = this.state\n\n        let gameCarSprite = this.createCarSprite(MAIN_GAME_CAR, 'gameCar')\n        let enemyCarSprite = this.createCarSprite(ONCOMING_ENEMY_CAR, 'enemyCar')\n\n        let road = TextureCache[\"road\"]\n        let roadSprite = new Sprite(road)\n        roadSprite.width = app.view.width\n        roadSprite.height = app.view.height\n\n        this.intervalId = this.startEnemyCreation()\n\n        app.stage.addChild(roadSprite)\n        app.stage.addChild(gameCarSprite)\n        app.stage.addChild(enemyCarSprite)\n\n        this.setState({\n            enemyCars: [{id:  this.enemyCarsId, enemy: enemyCarSprite, direction: 'front'}],\n            gameCar: gameCarSprite,\n            currentRoad: roadSprite\n        })\n\n        app.ticker.add(delta => this.gameLoop(delta))\n    }\n\n    /**\n     * Вычисление расположения машины относительно игрового поля\n     *\n     * @returns {number}\n     */\n    calcRandomPosition = () => {\n        return Math.round(Math.random())\n    }\n\n    /**\n     * Создание нового спрайта автомобиля\n     *\n     * @param {string} carDirection - встречаня или попутная\n     * @param {string} carType - игровая или вражеская машина\n     * @returns {PIXI.Sprite}\n     */\n    createCarSprite = (carDirection, carType) => {\n        const gameField = this.state.app.view\n\n        let gameCar = TextureCache[carType]\n        let gameCarSprite = new Sprite(gameCar)\n        gameCarSprite.vx = 0\n        gameCarSprite.vy = 0\n        gameCarSprite.width = 150\n        gameCarSprite.height = 200\n\n        switch (carDirection) {\n            case MAIN_GAME_CAR: {\n                gameCarSprite.rotation = Math.PI\n                gameCarSprite.position.set(gameField.width - gameField.width / 4 + gameCarSprite.width / 2 + 35, gameField.height - 50)\n                break\n            }\n            case OFFCOMING_ENEMY_CAR: {\n                gameCarSprite.rotation = Math.PI\n                const carOffset = this.calcRandomPosition() ? 35 : -120\n                gameCarSprite.position.set(gameField.width - gameField.width / 4 + gameCarSprite.width / 2 + carOffset, -gameCarSprite.height)\n                break\n            }\n            case ONCOMING_ENEMY_CAR: {\n                const carOffset = this.calcRandomPosition() ? 120 : -35\n                gameCarSprite.position.set(gameField.width / 4 - gameCarSprite.width / 2 + carOffset, -gameCarSprite.height)\n                break\n            }\n        }\n        return gameCarSprite\n    }\n\n    createNewRoad = () => {\n        const { app } = this.state\n        const newRoad = TextureCache[\"road\"]\n        const newRoadSprite = new Sprite(newRoad)\n        newRoadSprite.width = app.view.width\n        // 23 - какая-то проблема с высотой картинки\n        newRoadSprite.height = app.view.height + 23\n        newRoadSprite.position.set(0, -app.view.height + 23)\n        app.stage.addChildAt(newRoadSprite, 0)\n        return newRoadSprite\n    }\n\n\n    moveRoad = () => {\n        const { currentRoad, topRoad } = this.state\n        this.isUpdateRoadStateNeed(currentRoad)\n        currentRoad.vy = 2\n        currentRoad.y += currentRoad.vy\n        if (topRoad) {\n            topRoad.vy = 2\n            topRoad.y += topRoad.vy\n        }\n        if (!topRoad && currentRoad.y >= 0) {\n            this.setState({\n                topRoad: this.createNewRoad()\n            })\n        }\n    }\n\n    isUpdateRoadStateNeed = (currentRoad) => {\n        const { app } = this.state\n        if (currentRoad.y >= app.view.height) {\n            this.setState((prevState) => {\n                return {\n                    currentRoad: prevState.topRoad,\n                    topRoad: null\n                }\n            })\n            app.stage.removeChild(currentRoad)\n        }\n    }\n\n    /**\n     *  Листенер игрового цикла\n     *  Определение движения игровой машины - this.moveCar\n     *  Проверка выхода вражеского автомобиля за пределы game-поля - this.carOnGameFieldChecking\n     *  Проверка на hit - this.carHitChecking (в зависимости от направления разный x,y у спрайта)\n     */\n    gameLoop = (delta) => {\n        const { enemyCars, gameCar, isNeuronalNetworkEnable, isNeuronalNetworkLoaded } = this.state\n        if (!isNeuronalNetworkEnable || isNeuronalNetworkLoaded ) {\n            if (gameCar) {\n                this.moveCar(this.context)\n            }\n            if (gameCar && enemyCars) {\n                this.moveRoad()\n                enemyCars.forEach((car) => {\n                    const {enemy, direction, id} = car\n                    enemy.vx = 0\n                    enemy.vy = 5\n                    enemy.y += enemy.vy\n                    if (this.carOnGameFieldChecking(enemy, direction)) {\n                        this.state.app.stage.removeChild(enemy)\n                        this.setState((prevState) => {\n                            return {\n                                gameReward: ++prevState.gameReward,\n                                enemyCars: prevState.enemyCars.filter((car) => car.id !== id)\n                            }\n                        })\n                    }\n                    if (direction === 'front') {\n                        if (this.carHitChecking(gameCar, enemy, enemy.width, enemy.height)) {\n                            this.stopAllMovement()\n                        }\n                    } else {\n                        if (this.carHitChecking(gameCar, enemy, 0, 0)) {\n                            this.stopAllMovement()\n                        }\n                    }\n                })\n            }\n        }\n    }\n\n    /**\n     * Проверка автомобиля на game-поле\n     *\n     * @param {PIXI.Sprite} car\n     * @param {string} direction\n     * @returns {boolean}\n     */\n    carOnGameFieldChecking = (car, direction) => {\n        if (this.state.app?.view && car) {\n            const offset = direction === 'back' ? car.height : 0\n            return (car.y - offset) > this.state.app.view.height\n        }\n    }\n\n    /**\n     * Установка интервала для создания вражеских автомобилей\n     *\n     * @returns {number}\n     */\n    startEnemyCreation = () => {\n        return setInterval(() => {\n            const enemyDirection = this.calcRandomPosition() ? OFFCOMING_ENEMY_CAR : ONCOMING_ENEMY_CAR\n            let newEnemy = this.createCarSprite(enemyDirection, 'enemyCar')\n            this.setState((prevState) => {\n                prevState.enemyCars.push({id: ++this.enemyCarsId, enemy: newEnemy, direction: enemyDirection})\n                return {\n                    enemyCars: [...prevState.enemyCars]\n                }\n            })\n            this.state.app.stage.addChild(newEnemy)\n        }, 5000)\n    }\n\n    /**\n     * Отслеживание движения автомобиля + проверка на край game-поля\n     *\n     * @param {string} direction - направление движения автомобиля\n     */\n\n    moveCar = (direction) => {\n        const { gameCar, app} = this.state\n        const gameField = app.view\n        if (gameField.width - gameCar.x < 1 || gameCar.x  - gameCar.width <= 0) {\n            this.stopAllMovement()\n        }\n        switch (direction) {\n            case 'up': {\n                gameCar.vx = 0\n                gameCar.vy = -2\n                break\n            }\n            case 'down': {\n                gameCar.vx = 0\n                gameCar.vy = 5\n                break\n            }\n            case 'left': {\n                gameCar.vx = -8\n                gameCar.vy = 0\n                break\n            }\n            case 'right': {\n                gameCar.vx = 8\n                gameCar.vy = 0\n                break\n            }\n            case 'stop': {\n                gameCar.vx = 0\n                gameCar.vy = 0\n                break\n            }\n        }\n        this.xAxisOffset += gameCar.vx\n        if (Math.abs(this.xAxisOffset) === 160) {\n            this.xAxisOffset = 0\n            this.props.setMoveDirection('stop')\n        }\n        gameCar.y += gameCar.vy\n        gameCar.x += gameCar.vx\n    }\n\n    /**\n     * Отчистка игрового стейта после конца игры\n     */\n    stopAllMovement = () => {\n        const { app } = this.state\n        clearInterval(this.intervalId)\n        app.ticker.stop()\n        this.clearAllEnemies()\n        this.setState({\n            enemyCars: [],\n            stopTimer: true,\n            isCrashing: true\n        })\n        this.props.setNNPaused(true)\n        this.props.setMoveDirection('stop')\n    }\n\n    /**\n     * Отслеживание логики стоклновения автомобилей\n     *\n     * @param mainCar - спрайт игровой машины\n     * @param enemyCar - спрайт вражеской машины\n     * @param {number} rotationOffsetX- смещенный 'x' у спрайта\n     * @param {number} rotationOffsetY - смещенный 'y' у спрайта\n     * @returns {boolean}\n     */\n    carHitChecking = (mainCar, enemyCar, rotationOffsetX, rotationOffsetY) => {\n        //Define the variables we'll need to calculate\n        let hit, combinedHalfWidths, combinedHalfHeights, vx, vy\n\n        //hit will determine whether there's a collision\n        hit = false\n\n        //Find the center points of each sprite\n        mainCar.centerX = mainCar.x + mainCar.width / 2\n        mainCar.centerY = mainCar.y + mainCar.height / 2\n        // из-за rotation сдвигается ось х и y\n\n        enemyCar.centerX = enemyCar.x + enemyCar.width / 2 + rotationOffsetX\n        enemyCar.centerY = enemyCar.y + enemyCar.height / 2 + rotationOffsetY\n\n        //Find the half-widths and half-heights of each sprite\n        mainCar.halfWidth = mainCar.width / 2\n        mainCar.halfHeight = mainCar.height / 2\n        enemyCar.halfWidth = enemyCar.width / 2\n        enemyCar.halfHeight = enemyCar.height / 2\n\n        //Calculate the distance vector between the sprites\n        vx = mainCar.centerX - enemyCar.centerX\n        vy = mainCar.centerY - enemyCar.centerY\n\n        //Figure out the combined half-widths and half-heights\n        combinedHalfWidths = mainCar.halfWidth + enemyCar.halfWidth\n        combinedHalfHeights = mainCar.halfHeight + enemyCar.halfHeight\n        //Check for a collision on the x axis\n        if (Math.abs(vx) < combinedHalfWidths) {\n            //A collision might be occurring. Check for a collision on the y axis\n            hit = Math.abs(vy) < combinedHalfHeights\n        } else {\n            //There's no collision on the x axis\n            hit = false\n        }\n        //`hit` will be either `true` or `false`\n        return hit\n    }\n\n    /**\n     * Удаление вражеских автомобилей с game-поля\n     */\n    clearAllEnemies = () => {\n        const { enemyCars, app } = this.state\n        enemyCars.forEach((enemyCar) => {\n            app.stage.removeChild(enemyCar.enemy)\n        })\n    }\n\n    /**\n     * Запуск новой игры\n     */\n    onRestartGameClick = () => {\n        const { gameCar, app } = this.state\n        app.ticker.start()\n        this.setState({\n            isCrashing: false,\n            stopTimer: false,\n            gameReward: 0\n        })\n        this.props.setMoveDirection('stop')\n        this.setInitialGameCarPosition(gameCar, app.view)\n        this.intervalId = this.startEnemyCreation()\n    }\n\n    /**\n     * Устаановка начального положения игрового автомобиля\n     *\n     * @param gameCar\n     * @param gameField\n     */\n    setInitialGameCarPosition = (gameCar, gameField) => {\n        gameCar.position.set(gameField.width - gameField.width / 4 + gameCar.width / 2 + 35, gameField.height - 50)\n    }\n\n    /**\n     * Подсчет продолжительности игры\n     *\n     * @param callback\n     */\n    calcGameDuration = (callback) => {\n        this.setState({\n            gameDuration: callback()\n        })\n    }\n\n    render() {\n        const { isCrashing, gameReward, stopTimer, gameDuration } = this.state\n        return (\n            <div className=\"app-container\">\n                <div ref={this.rootContainerRef} className=\"game-container\">\n                    <GameStatusBar\n                        gameReward={gameReward}\n                        gameDuration={this.calcGameDuration}\n                        stopTimer={stopTimer}\n                    />\n                    {isCrashing &&\n                    <GameOver\n                        gameReward={gameReward}\n                        onRestartGameClick={this.onRestartGameClick}\n                        finalTime={gameDuration}\n                    />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nMainGame.contextType = GameContext;\n\nexport default MainGame\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './style.scss'\n\nexport const Button8Bit = props => {\n    const { id, handleButtonOnClick, title, classNames, reference } = props\n\n    return (\n        <div ref={reference} className={`button-8bit ${classNames}`} onClick={handleButtonOnClick}>\n            <div id={id} className=\"button-8bit-after\">{title}</div>\n        </div>\n    )\n}\n\nButton8Bit.propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    handleButtonOnClick: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport * as images from '../../assets/images'\n\nimport './style.scss'\n\nexport const GameInfoLinks = props => {\n    const { imgLinks, title } = props\n\n    return (\n        <div className=\"info-links info-links__container\">\n            <h3>{title}</h3>\n            <div className=\"info-links__links-container\">\n                {imgLinks.map((image) => {\n                    return (\n                        <a href={image.link}>\n                            <img src={images[image.name]} width={image.width || 64} height={image.height || 64} alt={title}/>\n                        </a>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nGameInfoLinks.propTypes = {\n    imgLinks: PropTypes.array.isRequired,\n    title: PropTypes.string\n}\n","import * as speechCommands from '@tensorflow-models/speech-commands';\n\nexport const initSpeechRecognitionModel = async () => {\n    const recognizer = speechCommands.create('BROWSER_FFT');\n    await recognizer.ensureModelLoaded();\n    return recognizer\n}\n\nexport function predictWord(recognizer, callback, isPause) {\n    // Array of words that the recognizer is trained to recognize.\n    const words = recognizer.wordLabels();\n    recognizer.listen(({scores}) => {\n        // Turn scores into a list of (score,word) pairs.\n        if(!isPause) {\n            scores = Array.from(scores).map((s, i) => ({score: s, word: words[i]}));\n            // Find the most probable word.\n            scores.sort((s1, s2) => s2.score - s1.score);\n            console.log('TI CHE SUKA EBALAY', scores[0])\n            callback(scores[0].word)\n        }\n    }, {\n        overlapFactor: 0.4,\n        probabilityThreshold: 0.99\n    })\n}\n","import React, { useState, useEffect } from 'react'\n\nimport {GameDescription, GameHelloWindow, GameInfoLinks, MainGame} from \"./components\";\nimport {initSpeechRecognitionModel, predictWord} from \"./neuronal-network/speach-recognition\";\nimport {GameContext} from './gameContext'\n\nimport './App.css'\nimport {frameWorks, socialNetworks} from \"./constants\";\n\nconst App = (props) => {\n    const [isNNEnable, setNNEnable] = useState(false)\n    const [isHelloWindowShow, setHelloWindowShow] = useState(true)\n    const [isNNLoaded, setLoaded] = useState(false)\n    const [isPaused, togglePaused] = useState(false)\n    const [moveDirection, setMoveDirection] = useState('stop')\n\n    useEffect(() => {\n        document.addEventListener('keydown', (e) => {\n            switch (e.code) {\n                case 'KeyW':\n                case'ArrowUp': {\n                    setMoveDirection('up')\n                    break\n                }\n                case 'KeyD':\n                case 'ArrowRight': {\n                    setMoveDirection('right')\n                    break\n                }\n                case 'KeyS':\n                case 'ArrowDown': {\n                    e.preventDefault()\n                    setMoveDirection('down')\n                    break\n                }\n                case 'KeyA':\n                case 'ArrowLeft': {\n                    setMoveDirection('left')\n                    break\n                }\n                case 'Space': {\n                    setMoveDirection('stop')\n                    break\n                }\n            }\n        })\n    }, [])\n\n    const changeCarDirectionByVoice = (direction) => {\n        setMoveDirection((prevState) => {\n            if (prevState !== direction) {\n                console.log('Change direction to: ', direction)\n                return direction\n            }\n        })\n    }\n\n    const onInitButtonClick = (value) => {\n        setNNEnable(value)\n        console.log('value', value)\n        if (value) {\n            initSpeechRecognitionModel()\n                .then((recognizer) => {\n                    predictWord(recognizer, changeCarDirectionByVoice, isPaused);\n                    console.log('LOADED')\n                    setLoaded(true)\n                    setHelloWindowShow(false)\n                })\n        } else {\n            setHelloWindowShow(false)\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            {isHelloWindowShow &&\n                <GameHelloWindow\n                    onInitButtonClick={onInitButtonClick}\n                />\n            }\n            {!isHelloWindowShow && (!isNNEnable || isNNLoaded) &&\n                <>\n                    <GameDescription\n                        isTextNeed\n                        infoTitle=\"App build with\"\n                        infoLinks={frameWorks}\n                    />\n                    <GameContext.Provider value={moveDirection}>\n                        <MainGame\n                            setNNPaused={togglePaused}\n                            moveDirection={moveDirection}\n                            setMoveDirection={setMoveDirection}\n                        />\n                    </GameContext.Provider>\n                    <GameDescription\n                        infoTitle=\"Follow us\"\n                        infoLinks={socialNetworks}\n                    />\n                </>\n            }\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}